[{"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\index.js":"1","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\App.js":"2","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Graph.js":"3","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Nodes.js":"4","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\DummyButton.js":"5","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\GraphClass.js":"6","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\FindPath.js":"7","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\SimplePathFinding.js":"8","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Buttons.js":"9","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Info.js":"10","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Elements.js":"11","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Nav.js":"12","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\BFS.js":"13","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\SelectAlgo.js":"14","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\AlgorithmContext.js":"15","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\algorithms\\bfsAlgo.js":"16","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\algorithms\\Dijsktra.js":"17","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\DFS.js":"18","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\algorithms\\DFS.js":"19"},{"size":445,"mtime":1670523434672,"results":"20","hashOfConfig":"21"},{"size":340,"mtime":1675842243862,"results":"22","hashOfConfig":"21"},{"size":12765,"mtime":1675743691582,"results":"23","hashOfConfig":"21"},{"size":1480,"mtime":1673756448566,"results":"24","hashOfConfig":"21"},{"size":682,"mtime":1669985156636,"results":"25","hashOfConfig":"21"},{"size":8180,"mtime":1676120785142,"results":"26","hashOfConfig":"21"},{"size":2526,"mtime":1670596333545,"results":"27","hashOfConfig":"21"},{"size":5440,"mtime":1675705181699,"results":"28","hashOfConfig":"21"},{"size":323,"mtime":1675418440707,"results":"29","hashOfConfig":"21"},{"size":894,"mtime":1675705200404,"results":"30","hashOfConfig":"21"},{"size":940,"mtime":1675421853311,"results":"31","hashOfConfig":"21"},{"size":1481,"mtime":1676009494299,"results":"32","hashOfConfig":"21"},{"size":1432,"mtime":1676120779956,"results":"33","hashOfConfig":"21"},{"size":1845,"mtime":1676136687241,"results":"34","hashOfConfig":"21"},{"size":355,"mtime":1675943322427,"results":"35","hashOfConfig":"21"},{"size":1691,"mtime":1676130845574,"results":"36","hashOfConfig":"21"},{"size":3715,"mtime":1676120784997,"results":"37","hashOfConfig":"21"},{"size":1428,"mtime":1676133799033,"results":"38","hashOfConfig":"21"},{"size":4289,"mtime":1676136600191,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"17cmd79",{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\index.js",[],[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\App.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Graph.js",["106","107","108"],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Nodes.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\DummyButton.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\GraphClass.js",["109"],[],"// import React, { useMemo } from \"react\";\r\nimport { createContext, useEffect, useMemo, useState } from \"react\";\r\nimport Nodes from \"./Nodes\";\r\n// import { dijkstra, getNodesInShortestPathOrder } from \"./FindPath\";\r\n// import { BFS, getNodesInShortestPath } from \"./bfsAlgo\";\r\n// import Find from \"./SimplePathFinding\";\r\nimport Nav from \"./Nav\";\r\n// import AlgorithmProvider from \"./AlgorithmContext\"; \r\n\r\nexport const AlgorithmContext= createContext();\r\n\r\nexport default function Graph() {\r\n    const [grid, setGrid] = useState([]);\r\n    const [setWall, setSetWall] = useState(false);\r\n    const [startNodeChanging, setStartNodeChanging] = useState(false);\r\n    const [endNodeChanging, setEndNodeChanging] = useState(false);\r\n    const [startNode, setStartNode] = useState({ row: 7, col: 5 });\r\n    const [endNode, setEndNode] = useState({ row: 7, col: 44 });\r\n    const [mouseIsPressed, setMouseIsPressed] = useState(false);\r\n\r\n    const gridMemo = useMemo(() => {\r\n        const gridRow = [];\r\n        const createNode = (col, row) => {\r\n            return {\r\n                row,\r\n                col,\r\n                isStart: row === startNode.row && col === startNode.col,\r\n                isFinish: row === endNode.row && col === endNode.col,\r\n                distance: Infinity,\r\n                isVisited: false,\r\n                isWall: false,\r\n                previousNode: null,\r\n            };\r\n        };\r\n        for (let row = 0; row < 15; row++) {\r\n            const currentRow = [];\r\n            for (let col = 0; col < 50; col++) {\r\n                currentRow.push(createNode(col, row));\r\n            }\r\n            gridRow.push(currentRow);\r\n        }\r\n        return gridRow;\r\n    }, [endNode.col, endNode.row, startNode.col, startNode.row]);\r\n    useEffect(() => {\r\n        setGrid(gridMemo);\r\n    }, [gridMemo]);\r\n\r\n    const isWallCreatable = () => {\r\n        if (setWall) setSetWall(false);\r\n        else setSetWall(true); \r\n    };\r\n\r\n    const handleMouseDown = (row, col) => {\r\n        setMouseIsPressed(true);\r\n        if (row === startNode.row && col === startNode.col) { \r\n            setTimeout(() => {\r\n                setStartNodeChanging(true);\r\n            }, 60);\r\n        }\r\n        if (row === endNode.row && col === endNode.col) { \r\n            setTimeout(() => {\r\n                setEndNodeChanging(true);\r\n            }, 60);\r\n        }\r\n        if (!setWall) return;\r\n        const newGrid = getNewGridWithWallToggles(grid, row, col);\r\n        setGrid(newGrid);\r\n    };\r\n    const handleMouseEnter = (row, col) => {\r\n        if (!mouseIsPressed) return;\r\n        changeStartNode(row, col);\r\n        changeEndNode(row, col);\r\n        if (!setWall) return;\r\n        const newGrid = getNewGridWithWallToggles(grid, row, col);\r\n        setGrid(newGrid);\r\n    };\r\n\r\n    const handleMouseUp = () => {\r\n        setTimeout(() => {\r\n            setMouseIsPressed(false);\r\n            setStartNodeChanging(false);\r\n            setEndNodeChanging(false);\r\n        }, 60);\r\n    };\r\n    const changeStartNode = (row, col) => {\r\n        if (!startNodeChanging) return;\r\n        const newGrid = getNewGridWithChangeStartNodeToggles(row, col);\r\n        // const newGrid = getNewGridWithChangeStartNodeToggles(grid, row, col);\r\n        setGrid(newGrid);\r\n    };\r\n    const changeEndNode = (row, col) => {\r\n        if (!endNodeChanging) return;\r\n        const newGrid = getNewGridWithChangeEndNodeToggles(row, col); \r\n        setGrid(newGrid);\r\n    };\r\n\r\n    const getNewGridWithWallToggles = (grid, row, col) => {\r\n        const newGrid = grid.slice();\r\n        const node = newGrid[row][col];\r\n        const newNode = {\r\n            ...node,\r\n            isWall: !node.isWall,\r\n        };\r\n        newGrid[row][col] = newNode;\r\n        return newGrid;\r\n    };\r\n    const getNewGridWithChangeStartNodeToggles = (row, col) => {\r\n        const newGrid = grid.slice();\r\n        const node = newGrid[row][col];\r\n        // changeVisualizeDijkstra(row, col, endNode);\r\n        const newNode = {\r\n            ...node,\r\n            isStart: true,\r\n        };\r\n        setStartNode((startNode) => ({\r\n            ...startNode,\r\n            row: row,\r\n            col: col,\r\n        }));\r\n        newGrid[row][col] = newNode;\r\n        return newGrid;\r\n    };\r\n    const getNewGridWithChangeEndNodeToggles = (row, col) => {\r\n        const newGrid = grid.slice();\r\n        const node = newGrid[row][col];\r\n        // changeVisualizeDijkstra(row,col, endNode);\r\n        const newNode = {\r\n            ...node,\r\n            isFinish: true,\r\n        };\r\n        setEndNode((endNode) => ({\r\n            ...endNode,\r\n            row: row,\r\n            col: col,\r\n        }));\r\n        newGrid[row][col] = newNode;\r\n        return newGrid;\r\n    };\r\n    const resetGrid = () => { \r\n        for (let row = 0; row < 15; row++) {\r\n            for (let col = 0; col < 50; col++) {\r\n                const node = grid[row][col];\r\n                node.distance= Infinity\r\n                node.isVisited= false \r\n                node.previousNode= null\r\n                document\r\n                    .getElementById(`node-${row}-${col}`)\r\n                    .classList.remove(\"node-visited\");\r\n                document\r\n                    .getElementById(`node-${row}-${col}`)\r\n                    .classList.remove(\"node-shortest-path\");\r\n            }\r\n        }\r\n        // setGrid(gridMemo);\r\n    };\r\n    // const handleAlgorithm = (algorithm) =>{\r\n    //     if(algorithm===''){\r\n    //         console.log(algorithm);\r\n    //     }\r\n    // }\r\n    // console.log(\"lsfdj\")\r\n    function handleOptions(){\r\n        // const option = handleOption\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {/* <Find /> */}\r\n            <AlgorithmContext.Provider value={{grid,startNode, endNode, resetGrid , isWallCreatable, }}>\r\n                <Nav \r\n                    startNode={startNode}\r\n                    endNode={endNode}\r\n                    isWallCreatable={isWallCreatable}\r\n                    resetGrid={resetGrid}\r\n                ></Nav>\r\n            </AlgorithmContext.Provider> \r\n            \r\n            <div>\r\n                <div className=\"grid\">\r\n                    {grid.map((row, rowIndex) => {\r\n                        return (\r\n                            <div key={rowIndex}>\r\n                                {row.map((node, nodeIndex) => {\r\n                                    const {\r\n                                        isStart,\r\n                                        isFinish,\r\n                                        row,\r\n                                        col,\r\n                                        isWall,\r\n                                    } = node; \r\n                                    return (\r\n                                        <Nodes\r\n                                            key={nodeIndex}\r\n                                            isStart={isStart}\r\n                                            isFinish={isFinish}\r\n                                            isWall={isWall}\r\n                                            mouseIsPressed={mouseIsPressed}\r\n                                            // startNodeChanging={startNodeChanging}\r\n                                            endNodeChanging={endNodeChanging}\r\n                                            onMouseDown={(row, col) =>\r\n                                                handleMouseDown(row, col)\r\n                                            }\r\n                                            onMouseEnter={(row, col) =>\r\n                                                handleMouseEnter(row, col)\r\n                                            }\r\n                                            onMouseUp={() => handleMouseUp()}\r\n                                            col={col}\r\n                                            row={row}\r\n                                        ></Nodes>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    ); \r\n} ","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\FindPath.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\SimplePathFinding.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Buttons.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Info.js",["110"],[],"import React from \"react\";\r\nimport Start from \"./start.svg\";\r\nimport End from \"./end.svg\";\r\nimport Elements from \"./Elements\";\r\n\r\nexport default function Info() {\r\n    const persons = [\r\n        {\r\n            name: \"Sumit\",\r\n            age: 37,\r\n        },\r\n        {\r\n            name: \"Saad\",\r\n            age: 23,\r\n        },\r\n        {\r\n            name: \"Akash\",\r\n            age: 22,\r\n        },\r\n    ];\r\n    // console.log(persons.reduce((total,person) => total+ person.age,0))\r\n    return (\r\n        <div>\r\n            <ul>\r\n                <Elements name=\"Start Node\" item={Start}></Elements>\r\n                <Elements name=\"End Node\" item={End}></Elements>\r\n                <Elements name=\"Visited Node\"  ></Elements>\r\n                <Elements name=\"Unvisited Node\" ></Elements>\r\n                <Elements name=\"Wall\" ></Elements>\r\n            </ul>\r\n        </div>\r\n    );\r\n\r\n}\r\n","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Elements.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Nav.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\BFS.js",["111","112"],[],"import { BFS, getNodesInShortestPath } from \"./algorithms/bfsAlgo\";\r\nimport { AlgorithmContext } from './GraphClass'\r\nimport { useContext } from \"react\";\r\n\r\n\r\nimport React from 'react';\r\n\r\nexport default function BFSVisualize() {\r\n    const contextValue = useContext(AlgorithmContext)\r\n\r\n    function visualizeBFS(grid,startNode, endNode){\r\n        contextValue.resetGrid();\r\n        const visitedNodes= BFS(grid,startNode, endNode) \r\n        let i=0\r\n        visitedNodes.map((item) => { \r\n            if(!grid[item.row][item.col].isWall) {\r\n                setTimeout(() => {\r\n                    document.getElementById(`node-${item.row}-${item.col}`).className = \"node node-visited\";\r\n                    \r\n                }, i*10);  \r\n            } \r\n            i++\r\n        })\r\n        const nodesInShortestpath = getNodesInShortestPath(grid[endNode.row][endNode.col], grid[startNode.row][startNode.col])\r\n        nodesInShortestpath.map((item) => { \r\n            setTimeout(() => {\r\n                document.getElementById(`node-${item.row}-${item.col}`).className = \"node node-shortest-path\";\r\n                \r\n            }, i*10);\r\n            i++\r\n        }); \r\n    }\r\n    return (\r\n        <div>\r\n            <button onClick={() => visualizeBFS(contextValue.grid, contextValue.startNode, contextValue.endNode)} className=\"visualizeBtn\">\r\n                Visualize BFS\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\SelectAlgo.js",["113"],[],"import React, { useContext, useState } from 'react';\r\nimport Dijsktra from \"./algorithms/Dijsktra\";\r\nimport { AlgorithmContext } from './GraphClass';\r\n// import { dijkstra } from './FindPath';\r\nimport BFSVisualize from './BFS';\r\nimport DFSVisualize from './DFS';\r\n\r\nexport const Algorithm = React.createContext()\r\n\r\nexport default function SelectAlgo() {\r\n    const [algorithm, setAlgorithm] = useState('notSelected')\r\n    const contextValues = useContext(AlgorithmContext)\r\n    // console.log(contextValues,'contextval')\r\n    return (\r\n        <Algorithm.Provider value={algorithm}>\r\n            <div className='btn visualize'>\r\n                <select id='algo' onChange={(e)=>handleOption(e)}>\r\n                    <option name='none'>\r\n                        Select An Algorithm\r\n                    </option>\r\n                    <option name='dijkstra' value='dijkstra'>\r\n                        Dijkstra\r\n                    </option>\r\n                    <option name='bfs' value='bfs'>\r\n                        BFS\r\n                    </option> \r\n                </select> \r\n                <div className='algo-btn'>\r\n                    {\r\n                        algorithm === 'dijkstra' ?\r\n                            <Dijsktra ></Dijsktra>\r\n                        :\r\n                        algorithm === 'bfs' ?\r\n                            <BFSVisualize ></BFSVisualize> \r\n                        :\r\n                        algorithm === 'dfs' ?\r\n                            <DFSVisualize ></DFSVisualize> \r\n                        :\r\n                        <button className='visualizeBtn'>Visualize</button>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </Algorithm.Provider>\r\n    )\r\n    function handleOption(e){\r\n        const value =e.target.value\r\n        setAlgorithm(value)  \r\n    }\r\n}\r\n","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\AlgorithmContext.js",["114","115"],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\algorithms\\bfsAlgo.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\algorithms\\Dijsktra.js",["116"],[],"import React, { useContext } from 'react';\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"../FindPath\";\r\nimport { AlgorithmContext } from '../GraphClass';\r\n\r\n// const AlgorithmContext= React.createContext()\r\n\r\nexport default function Dijsktra() {\r\n\r\n    const contextValue= useContext(AlgorithmContext)\r\n    // console.log(contextValue, 'context')\r\n\r\n    const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    animateShortestPath(nodesInShortestPathOrder);\r\n                }, 10 * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                document.getElementById(\r\n                    `node-${node.row}-${node.col}`\r\n                ).className = \"node node-visited\";\r\n            }, 10 * i);\r\n        }\r\n    };\r\n\r\n    const animateShortestPath = (nodesInShortestPathOrder) => {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i];\r\n                document.getElementById(\r\n                    `node-${node.row}-${node.col}`\r\n                ).className = \"node node-shortest-path\";\r\n            }, 50 * i);\r\n        }\r\n    };\r\n    const changeDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                // setTimeout(() => {\r\n                changeShortestPath(nodesInShortestPathOrder);\r\n                // }, 10 * i);\r\n                return;\r\n            }\r\n            // setTimeout(() => {\r\n            const node = visitedNodesInOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                \"node node-visited\";\r\n            // }, 10 * i);\r\n        }\r\n    };\r\n\r\n    const changeShortestPath = (nodesInShortestPathOrder) => {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            // setTimeout(() => {\r\n            const node = nodesInShortestPathOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                \"node node-shortest-path\";\r\n            // }, 50 * i);\r\n        }\r\n    };\r\n\r\n    const changeVisualizeDijkstra = (row, col, end) => {\r\n        contextValue.resetGrid();\r\n        const startNode = contextValue.grid[row][col];\r\n        const finishNode = contextValue.grid[end.row][end.col];\r\n        const visitedNodesInOrder = dijkstra(contextValue.grid, startNode, finishNode);\r\n        const nodesInShortestPathOrder =\r\n            getNodesInShortestPathOrder(finishNode);\r\n        changeDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    };\r\n    const visualizeDijkstra = (start, end) => {\r\n        contextValue.resetGrid();\r\n        const startNode = contextValue.grid[start.row][start.col];\r\n        const finishNode = contextValue.grid[end.row][end.col];\r\n        const visitedNodesInOrder = dijkstra(contextValue.grid, startNode, finishNode);\r\n        const nodesInShortestPathOrder =\r\n            getNodesInShortestPathOrder(finishNode);\r\n        animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    };\r\n    \r\n    return (\r\n        <div>\r\n            <div>\r\n                <button onClick={() => visualizeDijkstra(contextValue.startNode, contextValue.endNode)} className=\"visualizeBtn\">\r\n                    Visualize Dijkstra\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n",[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\DFS.js",["117","118"],[],"import { DFS, getNodesInShortestPath } from \"./algorithms/DFS\";\r\nimport { AlgorithmContext } from './GraphClass'\r\nimport { useContext } from \"react\";\r\n\r\n\r\nimport React from 'react';\r\n\r\nexport default function BFSVisualize() {\r\n    const contextValue = useContext(AlgorithmContext)\r\n\r\n    function visualizeBFS(grid,startNode, endNode){\r\n        contextValue.resetGrid();\r\n        const visitedNodes= DFS(grid,startNode, endNode) \r\n        let i=0\r\n        visitedNodes.map((item) => { \r\n            if(!grid[item.row][item.col].isWall) {\r\n                setTimeout(() => {\r\n                    document.getElementById(`node-${item.row}-${item.col}`).className = \"node node-visited\";\r\n                    \r\n                }, i*10);  \r\n            } \r\n            i++\r\n        })\r\n        const nodesInShortestpath = getNodesInShortestPath(grid[endNode.row][endNode.col], grid[startNode.row][startNode.col])\r\n        nodesInShortestpath.map((item) => { \r\n            setTimeout(() => {\r\n                document.getElementById(`node-${item.row}-${item.col}`).className = \"node node-shortest-path\";\r\n                \r\n            }, i*10);\r\n            i++\r\n        }); \r\n    }\r\n    return (\r\n        <div>\r\n            <button onClick={() => visualizeBFS(contextValue.grid, contextValue.startNode, contextValue.endNode)} className=\"visualizeBtn\">\r\n                Visualize DFS\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\algorithms\\DFS.js",["119"],[],"\r\nexport function DFS(grid, startNode, finishNode) { \r\n    const stack = [];\r\n    const v= []\r\n    const visited = [];\r\n    startNode = grid[startNode.row][startNode.col]\r\n    finishNode = grid[finishNode.row][finishNode.col]\r\n    stack.push(startNode);\r\n    v.push(startNode)\r\n    // visited[startNode] = true;\r\n    // visited[startNode.row][startNode.col]= false\r\n    while (stack.length > 0) {\r\n        const currentNode = stack.pop();\r\n        // console.log(\"🚀 ~ file: DFS.js:10 ~ BFS ~ currentNode\", currentNode)\r\n        if (currentNode === finishNode) {\r\n            v.push(currentNode)\r\n            return v;\r\n        }\r\n        const neighbors =  getUnvisitedNeighbor(currentNode, grid)\r\n        console.log(\"🚀 ~ file: DFS.js:20 ~ DFS ~ neighbors\", neighbors)\r\n        if(neighbors !== undefined){\r\n            let neighbor =  neighbors\r\n            neighbor= grid[neighbor.row][neighbor.col]\r\n            // for (const neighbor of neighbors) {\r\n                if (neighbor.isWall) continue;\r\n                if ( !neighbor.isVisited) {\r\n                    stack.push(neighbor);\r\n                    visited.push(neighbor)\r\n                    v.push(neighbor)\r\n                    neighbor.isVisited = true;\r\n                }\r\n                if(!visited.includes(neighbor))visited.push(neighbor)\r\n                if(neighbor.previousNode === null) neighbor.previousNode= currentNode\r\n        }\r\n        // }\r\n    }\r\n    console.log(\"🚀 ~ file: DFS.js:9 ~ DFS ~ visited\", visited)\r\n    return v;\r\n\r\n\r\n    // const stack= []\r\n    // // let neighbors = [] \r\n    // let neighbor = {}\r\n    // const visited = []\r\n    // stack.push(grid[startNode.row][startNode.col])\r\n    // visited.push(grid[startNode.row][startNode.col]) \r\n    // while(stack.length>0){ \r\n    //     console.log(\"🚀 ~ file: DFS.js:10 ~ BFS ~ stack.length\", stack.length)\r\n    //     // console.log(\"🚀 ~ file: DFS.js:10 ~ BFS ~ stack\", stack)\r\n    //     let node = stack[stack.length-1]\r\n    //     console.log(\"🚀 ~ file: DFS.js:13 ~ BFS ~ node\", node)\r\n    //     neighbor = getUnvisitedNeighbor(node, grid)\r\n    //     // console.log(\"🚀 ~ file: DFS.js:14 ~ BFS ~ neighbor\", neighbor)\r\n    //     if(neighbor  === undefined || neighbor === ''){\r\n    //         stack.pop()\r\n    //         continue\r\n    //     }\r\n    //     if(neighbor ===  finishNode){\r\n    //         visited.push(finishNode)\r\n    //         return visited\r\n    //     } \r\n    //     // if(neighbor.isWall) continue\r\n    //     if(!visited.includes(neighbor)) {\r\n    //         visited.push(neighbor)\r\n    //         neighbor.isVisited = true\r\n    //         stack.push(neighbor)\r\n    //     }\r\n    //     if(neighbor.previousNode === null) neighbor.previousNode= node\r\n    //     else  stack.pop()\r\n\r\n    // } \r\n    // return visited\r\n\r\n\r\n}\r\nfunction getUnvisitedNeighbor(node, grid){\r\n    const neighbors = []\r\n    const {col, row }= node \r\n    if(row > 0 ) neighbors.push(grid[row-1][col])\r\n    if(row< grid.length-1) neighbors.push(grid[row+1][col])\r\n    if(col> 0) neighbors.push(grid[row][col-1])\r\n    if(col <grid[0].length) neighbors.push(grid[row][col+1])\r\n    const unvisitedNeighbors =neighbors.filter((neighbors) => {\r\n        return !neighbors.isVisited \r\n    })\r\n    console.log(neighbors.length)\r\n    console.log(\"🚀 ~ file: DFS.js:49 ~ getUnvisitedNeighbor ~ neighbors\", neighbors)\r\n    // neighbors.filter((neighbor) => !neighbor.isVisited)\r\n    return unvisitedNeighbors.shift()\r\n} \r\nfunction getUnvisitedNeighbors(node, grid){\r\n    const neighbors = []\r\n    const {col, row }= node \r\n    if(row > 0 ) neighbors.push(grid[row-1][col])\r\n    if(row< grid.length-1) neighbors.push(grid[row+1][col])\r\n    if(col> 0) neighbors.push(grid[row][col-1])\r\n    if(col <grid[0].length) neighbors.push(grid[row][col+1])\r\n    return neighbors.filter((neighbors) => !neighbors.isVisited)\r\n}\r\n\r\nexport function getNodesInShortestPath(finishNode , startNode){ \r\n    let currentNode = finishNode \r\n    let nodesInShortestPath= [] \r\n    while (currentNode !== startNode) {\r\n        nodesInShortestPath.unshift(currentNode);\r\n        if(currentNode!== currentNode.previousNode)\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    nodesInShortestPath.unshift(currentNode);\r\n    return nodesInShortestPath\r\n}\r\n\r\n\r\n",{"ruleId":"120","severity":1,"message":"121","line":6,"column":8,"nodeType":"122","messageId":"123","endLine":6,"endColumn":12},{"ruleId":"124","severity":1,"message":"125","line":306,"column":33,"nodeType":"126","messageId":"127","endLine":306,"endColumn":35},{"ruleId":"124","severity":1,"message":"125","line":316,"column":40,"nodeType":"126","messageId":"127","endLine":316,"endColumn":42},{"ruleId":"120","severity":1,"message":"128","line":162,"column":14,"nodeType":"122","messageId":"123","endLine":162,"endColumn":27},{"ruleId":"120","severity":1,"message":"129","line":7,"column":11,"nodeType":"122","messageId":"123","endLine":7,"endColumn":18},{"ruleId":"124","severity":1,"message":"125","line":15,"column":33,"nodeType":"126","messageId":"127","endLine":15,"endColumn":35},{"ruleId":"124","severity":1,"message":"125","line":25,"column":40,"nodeType":"126","messageId":"127","endLine":25,"endColumn":42},{"ruleId":"120","severity":1,"message":"130","line":12,"column":11,"nodeType":"122","messageId":"123","endLine":12,"endColumn":24},{"ruleId":"120","severity":1,"message":"131","line":1,"column":16,"nodeType":"122","messageId":"123","endLine":1,"endColumn":26},{"ruleId":"120","severity":1,"message":"132","line":7,"column":20,"nodeType":"122","messageId":"123","endLine":7,"endColumn":29},{"ruleId":"120","severity":1,"message":"133","line":65,"column":11,"nodeType":"122","messageId":"123","endLine":65,"endColumn":34},{"ruleId":"124","severity":1,"message":"125","line":15,"column":33,"nodeType":"126","messageId":"127","endLine":15,"endColumn":35},{"ruleId":"124","severity":1,"message":"125","line":25,"column":40,"nodeType":"126","messageId":"127","endLine":25,"endColumn":42},{"ruleId":"120","severity":1,"message":"134","line":91,"column":10,"nodeType":"122","messageId":"123","endLine":91,"endColumn":31},"no-unused-vars","'Find' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'handleOptions' is defined but never used.","'persons' is assigned a value but never used.","'contextValues' is assigned a value but never used.","'useContext' is defined but never used.","'setRandom' is assigned a value but never used.","'changeVisualizeDijkstra' is assigned a value but never used.","'getUnvisitedNeighbors' is defined but never used."]