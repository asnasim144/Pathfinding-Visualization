[{"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\index.js":"1","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\App.js":"2","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Graph.js":"3","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Nodes.js":"4","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\DummyButton.js":"5","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\GraphClass.js":"6","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\SimplePathFinding.js":"7","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Buttons.js":"8","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Info.js":"9","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Elements.js":"10","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Nav.js":"11","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\BFS.js":"12","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\AlgorithmContext.js":"13","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\algorithms\\bfsAlgo.js":"14","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\DFS.js":"15","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\algorithms\\DFS.js":"16","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\SelectAlgorithm.js":"17","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\gridSize.js":"18","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Dijsktra.js":"19","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\algorithms\\FindPath.js":"20"},{"size":445,"mtime":1670523434672,"results":"21","hashOfConfig":"22"},{"size":340,"mtime":1675842243862,"results":"23","hashOfConfig":"22"},{"size":12765,"mtime":1675743691582,"results":"24","hashOfConfig":"22"},{"size":1478,"mtime":1676466270749,"results":"25","hashOfConfig":"22"},{"size":682,"mtime":1669985156636,"results":"26","hashOfConfig":"22"},{"size":8561,"mtime":1676482122999,"results":"27","hashOfConfig":"22"},{"size":5440,"mtime":1675705181699,"results":"28","hashOfConfig":"22"},{"size":323,"mtime":1675418440707,"results":"29","hashOfConfig":"22"},{"size":570,"mtime":1676516647796,"results":"30","hashOfConfig":"22"},{"size":940,"mtime":1675421853311,"results":"31","hashOfConfig":"22"},{"size":2620,"mtime":1676530119017,"results":"32","hashOfConfig":"22"},{"size":1432,"mtime":1676120779956,"results":"33","hashOfConfig":"22"},{"size":355,"mtime":1675943322427,"results":"34","hashOfConfig":"22"},{"size":1691,"mtime":1676130845574,"results":"35","hashOfConfig":"22"},{"size":1428,"mtime":1676133799033,"results":"36","hashOfConfig":"22"},{"size":5501,"mtime":1676467175293,"results":"37","hashOfConfig":"22"},{"size":2013,"mtime":1676530967475,"results":"38","hashOfConfig":"22"},{"size":1938,"mtime":1676514545198,"results":"39","hashOfConfig":"22"},{"size":3724,"mtime":1676530323213,"results":"40","hashOfConfig":"22"},{"size":2701,"mtime":1676530849216,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"17cmd79",{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\index.js",[],[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\App.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Graph.js",["106","107","108"],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Nodes.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\DummyButton.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\GraphClass.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\SimplePathFinding.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Buttons.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Info.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Elements.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Nav.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\BFS.js",["109","110"],[],"import { BFS, getNodesInShortestPath } from \"./algorithms/bfsAlgo\";\r\nimport { AlgorithmContext } from './GraphClass'\r\nimport { useContext } from \"react\";\r\n\r\n\r\nimport React from 'react';\r\n\r\nexport default function BFSVisualize() {\r\n    const contextValue = useContext(AlgorithmContext)\r\n\r\n    function visualizeBFS(grid,startNode, endNode){\r\n        contextValue.resetGrid();\r\n        const visitedNodes= BFS(grid,startNode, endNode) \r\n        let i=0\r\n        visitedNodes.map((item) => { \r\n            if(!grid[item.row][item.col].isWall) {\r\n                setTimeout(() => {\r\n                    document.getElementById(`node-${item.row}-${item.col}`).className = \"node node-visited\";\r\n                    \r\n                }, i*10);  \r\n            } \r\n            i++\r\n        })\r\n        const nodesInShortestpath = getNodesInShortestPath(grid[endNode.row][endNode.col], grid[startNode.row][startNode.col])\r\n        nodesInShortestpath.map((item) => { \r\n            setTimeout(() => {\r\n                document.getElementById(`node-${item.row}-${item.col}`).className = \"node node-shortest-path\";\r\n                \r\n            }, i*10);\r\n            i++\r\n        }); \r\n    }\r\n    return (\r\n        <div>\r\n            <button onClick={() => visualizeBFS(contextValue.grid, contextValue.startNode, contextValue.endNode)} className=\"visualizeBtn\">\r\n                Visualize BFS\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\AlgorithmContext.js",["111","112"],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\algorithms\\bfsAlgo.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\DFS.js",["113","114"],[],"import { DFS, getNodesInShortestPath } from \"./algorithms/DFS\";\r\nimport { AlgorithmContext } from './GraphClass'\r\nimport { useContext } from \"react\";\r\n\r\n\r\nimport React from 'react';\r\n\r\nexport default function BFSVisualize() {\r\n    const contextValue = useContext(AlgorithmContext)\r\n\r\n    function visualizeBFS(grid,startNode, endNode){\r\n        contextValue.resetGrid();\r\n        const visitedNodes= DFS(grid,startNode, endNode) \r\n        let i=0\r\n        visitedNodes.map((item) => { \r\n            if(!grid[item.row][item.col].isWall) {\r\n                setTimeout(() => {\r\n                    document.getElementById(`node-${item.row}-${item.col}`).className = \"node node-visited\";\r\n                    \r\n                }, i*10);  \r\n            } \r\n            i++\r\n        })\r\n        const nodesInShortestpath = getNodesInShortestPath(grid[endNode.row][endNode.col], grid[startNode.row][startNode.col])\r\n        nodesInShortestpath.map((item) => { \r\n            setTimeout(() => {\r\n                document.getElementById(`node-${item.row}-${item.col}`).className = \"node node-shortest-path\";\r\n                \r\n            }, i*10);\r\n            i++\r\n        }); \r\n    }\r\n    return (\r\n        <div>\r\n            <button onClick={() => visualizeBFS(contextValue.grid, contextValue.startNode, contextValue.endNode)} className=\"visualizeBtn\">\r\n                Visualize DFS\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\algorithms\\DFS.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\SelectAlgorithm.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\gridSize.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Dijsktra.js",["115"],[],"import React, { useContext } from 'react';\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"./algorithms/FindPath\";\r\nimport { AlgorithmContext } from './GraphClass';\r\n\r\n// const AlgorithmContext= React.createContext()\r\n\r\nexport default function Dijsktra() {\r\n\r\n    const contextValue= useContext(AlgorithmContext)\r\n    // console.log(contextValue, 'context')\r\n\r\n    const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    animateShortestPath(nodesInShortestPathOrder);\r\n                }, 10 * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                document.getElementById(\r\n                    `node-${node.row}-${node.col}`\r\n                ).className = \"node node-visited\";\r\n            }, 10 * i);\r\n        }\r\n    };\r\n\r\n    const animateShortestPath = (nodesInShortestPathOrder) => {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i];\r\n                document.getElementById(\r\n                    `node-${node.row}-${node.col}`\r\n                ).className = \"node node-shortest-path\";\r\n            }, 50 * i);\r\n        }\r\n    };\r\n    const changeDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                // setTimeout(() => {\r\n                changeShortestPath(nodesInShortestPathOrder);\r\n                // }, 10 * i);\r\n                return;\r\n            }\r\n            // setTimeout(() => {\r\n            const node = visitedNodesInOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                \"node node-visited\";\r\n            // }, 10 * i);\r\n        }\r\n    };\r\n\r\n    const changeShortestPath = (nodesInShortestPathOrder) => {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            // setTimeout(() => {\r\n            const node = nodesInShortestPathOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                \"node node-shortest-path\";\r\n            // }, 50 * i);\r\n        }\r\n    };\r\n\r\n    const changeVisualizeDijkstra = (row, col, end) => {\r\n        contextValue.resetGrid();\r\n        const startNode = contextValue.grid[row][col];\r\n        const finishNode = contextValue.grid[end.row][end.col];\r\n        const visitedNodesInOrder = dijkstra(contextValue.grid, startNode, finishNode);\r\n        const nodesInShortestPathOrder =\r\n            getNodesInShortestPathOrder(finishNode);\r\n        changeDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    };\r\n    const visualizeDijkstra = (start, end) => {\r\n        contextValue.resetGrid();\r\n        const startNode = contextValue.grid[start.row][start.col];\r\n        const finishNode = contextValue.grid[end.row][end.col];\r\n        const visitedNodesInOrder = dijkstra(contextValue.grid, startNode, finishNode);\r\n        const nodesInShortestPathOrder =\r\n            getNodesInShortestPathOrder(finishNode);\r\n        animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    };\r\n    \r\n    return (\r\n        <div>\r\n            <div>\r\n                <button onClick={() => visualizeDijkstra(contextValue.startNode, contextValue.endNode)} className=\"visualizeBtn\">\r\n                    Visualize Dijkstra\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\algorithms\\FindPath.js",[],[],{"ruleId":"116","severity":1,"message":"117","line":6,"column":8,"nodeType":"118","messageId":"119","endLine":6,"endColumn":12},{"ruleId":"120","severity":1,"message":"121","line":306,"column":33,"nodeType":"122","messageId":"123","endLine":306,"endColumn":35},{"ruleId":"120","severity":1,"message":"121","line":316,"column":40,"nodeType":"122","messageId":"123","endLine":316,"endColumn":42},{"ruleId":"120","severity":1,"message":"121","line":15,"column":33,"nodeType":"122","messageId":"123","endLine":15,"endColumn":35},{"ruleId":"120","severity":1,"message":"121","line":25,"column":40,"nodeType":"122","messageId":"123","endLine":25,"endColumn":42},{"ruleId":"116","severity":1,"message":"124","line":1,"column":16,"nodeType":"118","messageId":"119","endLine":1,"endColumn":26},{"ruleId":"116","severity":1,"message":"125","line":7,"column":20,"nodeType":"118","messageId":"119","endLine":7,"endColumn":29},{"ruleId":"120","severity":1,"message":"121","line":15,"column":33,"nodeType":"122","messageId":"123","endLine":15,"endColumn":35},{"ruleId":"120","severity":1,"message":"121","line":25,"column":40,"nodeType":"122","messageId":"123","endLine":25,"endColumn":42},{"ruleId":"116","severity":1,"message":"126","line":65,"column":11,"nodeType":"118","messageId":"119","endLine":65,"endColumn":34},"no-unused-vars","'Find' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useContext' is defined but never used.","'setRandom' is assigned a value but never used.","'changeVisualizeDijkstra' is assigned a value but never used."]