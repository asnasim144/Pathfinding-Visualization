[{"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\index.js":"1","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\App.js":"2","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Graph.js":"3","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Nodes.js":"4","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\DummyButton.js":"5","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\GraphClass.js":"6","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\FindPath.js":"7","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\SimplePathFinding.js":"8","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Buttons.js":"9","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Info.js":"10","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Elements.js":"11","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Nav.js":"12","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\BFS.js":"13","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\AlgorithmContext.js":"14","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\algorithms\\bfsAlgo.js":"15","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\algorithms\\Dijsktra.js":"16","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\DFS.js":"17","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\algorithms\\DFS.js":"18","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\SelectAlgorithm.js":"19","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\gridSize.js":"20"},{"size":445,"mtime":1670523434672,"results":"21","hashOfConfig":"22"},{"size":340,"mtime":1675842243862,"results":"23","hashOfConfig":"22"},{"size":12765,"mtime":1675743691582,"results":"24","hashOfConfig":"22"},{"size":1478,"mtime":1676466270749,"results":"25","hashOfConfig":"22"},{"size":682,"mtime":1669985156636,"results":"26","hashOfConfig":"22"},{"size":8561,"mtime":1676482122999,"results":"27","hashOfConfig":"22"},{"size":2526,"mtime":1670596333545,"results":"28","hashOfConfig":"22"},{"size":5440,"mtime":1675705181699,"results":"29","hashOfConfig":"22"},{"size":323,"mtime":1675418440707,"results":"30","hashOfConfig":"22"},{"size":894,"mtime":1675705200404,"results":"31","hashOfConfig":"22"},{"size":940,"mtime":1675421853311,"results":"32","hashOfConfig":"22"},{"size":1587,"mtime":1676480046694,"results":"33","hashOfConfig":"22"},{"size":1432,"mtime":1676120779956,"results":"34","hashOfConfig":"22"},{"size":355,"mtime":1675943322427,"results":"35","hashOfConfig":"22"},{"size":1691,"mtime":1676130845574,"results":"36","hashOfConfig":"22"},{"size":3715,"mtime":1676120784997,"results":"37","hashOfConfig":"22"},{"size":1428,"mtime":1676133799033,"results":"38","hashOfConfig":"22"},{"size":5501,"mtime":1676467175293,"results":"39","hashOfConfig":"22"},{"size":3840,"mtime":1676471029032,"results":"40","hashOfConfig":"22"},{"size":1938,"mtime":1676514545198,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"17cmd79",{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\index.js",[],[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\App.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Graph.js",["109","110","111"],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Nodes.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\DummyButton.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\GraphClass.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\FindPath.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\SimplePathFinding.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Buttons.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Info.js",["112"],[],"import React from \"react\";\r\nimport Start from \"./start.svg\";\r\nimport End from \"./end.svg\";\r\nimport Elements from \"./Elements\";\r\n\r\nexport default function Info() {\r\n    const persons = [\r\n        {\r\n            name: \"Sumit\",\r\n            age: 37,\r\n        },\r\n        {\r\n            name: \"Saad\",\r\n            age: 23,\r\n        },\r\n        {\r\n            name: \"Akash\",\r\n            age: 22,\r\n        },\r\n    ];\r\n    // console.log(persons.reduce((total,person) => total+ person.age,0))\r\n    return (\r\n        <div>\r\n            <ul>\r\n                <Elements name=\"Start Node\" item={Start}></Elements>\r\n                <Elements name=\"End Node\" item={End}></Elements>\r\n                <Elements name=\"Visited Node\"  ></Elements>\r\n                <Elements name=\"Unvisited Node\" ></Elements>\r\n                <Elements name=\"Wall\" ></Elements>\r\n            </ul>\r\n        </div>\r\n    );\r\n\r\n}\r\n","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Elements.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\Nav.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\BFS.js",["113","114"],[],"import { BFS, getNodesInShortestPath } from \"./algorithms/bfsAlgo\";\r\nimport { AlgorithmContext } from './GraphClass'\r\nimport { useContext } from \"react\";\r\n\r\n\r\nimport React from 'react';\r\n\r\nexport default function BFSVisualize() {\r\n    const contextValue = useContext(AlgorithmContext)\r\n\r\n    function visualizeBFS(grid,startNode, endNode){\r\n        contextValue.resetGrid();\r\n        const visitedNodes= BFS(grid,startNode, endNode) \r\n        let i=0\r\n        visitedNodes.map((item) => { \r\n            if(!grid[item.row][item.col].isWall) {\r\n                setTimeout(() => {\r\n                    document.getElementById(`node-${item.row}-${item.col}`).className = \"node node-visited\";\r\n                    \r\n                }, i*10);  \r\n            } \r\n            i++\r\n        })\r\n        const nodesInShortestpath = getNodesInShortestPath(grid[endNode.row][endNode.col], grid[startNode.row][startNode.col])\r\n        nodesInShortestpath.map((item) => { \r\n            setTimeout(() => {\r\n                document.getElementById(`node-${item.row}-${item.col}`).className = \"node node-shortest-path\";\r\n                \r\n            }, i*10);\r\n            i++\r\n        }); \r\n    }\r\n    return (\r\n        <div>\r\n            <button onClick={() => visualizeBFS(contextValue.grid, contextValue.startNode, contextValue.endNode)} className=\"visualizeBtn\">\r\n                Visualize BFS\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\AlgorithmContext.js",["115","116"],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\algorithms\\bfsAlgo.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\algorithms\\Dijsktra.js",["117"],[],"import React, { useContext } from 'react';\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"../FindPath\";\r\nimport { AlgorithmContext } from '../GraphClass';\r\n\r\n// const AlgorithmContext= React.createContext()\r\n\r\nexport default function Dijsktra() {\r\n\r\n    const contextValue= useContext(AlgorithmContext)\r\n    // console.log(contextValue, 'context')\r\n\r\n    const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    animateShortestPath(nodesInShortestPathOrder);\r\n                }, 10 * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                document.getElementById(\r\n                    `node-${node.row}-${node.col}`\r\n                ).className = \"node node-visited\";\r\n            }, 10 * i);\r\n        }\r\n    };\r\n\r\n    const animateShortestPath = (nodesInShortestPathOrder) => {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i];\r\n                document.getElementById(\r\n                    `node-${node.row}-${node.col}`\r\n                ).className = \"node node-shortest-path\";\r\n            }, 50 * i);\r\n        }\r\n    };\r\n    const changeDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                // setTimeout(() => {\r\n                changeShortestPath(nodesInShortestPathOrder);\r\n                // }, 10 * i);\r\n                return;\r\n            }\r\n            // setTimeout(() => {\r\n            const node = visitedNodesInOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                \"node node-visited\";\r\n            // }, 10 * i);\r\n        }\r\n    };\r\n\r\n    const changeShortestPath = (nodesInShortestPathOrder) => {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            // setTimeout(() => {\r\n            const node = nodesInShortestPathOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                \"node node-shortest-path\";\r\n            // }, 50 * i);\r\n        }\r\n    };\r\n\r\n    const changeVisualizeDijkstra = (row, col, end) => {\r\n        contextValue.resetGrid();\r\n        const startNode = contextValue.grid[row][col];\r\n        const finishNode = contextValue.grid[end.row][end.col];\r\n        const visitedNodesInOrder = dijkstra(contextValue.grid, startNode, finishNode);\r\n        const nodesInShortestPathOrder =\r\n            getNodesInShortestPathOrder(finishNode);\r\n        changeDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    };\r\n    const visualizeDijkstra = (start, end) => {\r\n        contextValue.resetGrid();\r\n        const startNode = contextValue.grid[start.row][start.col];\r\n        const finishNode = contextValue.grid[end.row][end.col];\r\n        const visitedNodesInOrder = dijkstra(contextValue.grid, startNode, finishNode);\r\n        const nodesInShortestPathOrder =\r\n            getNodesInShortestPathOrder(finishNode);\r\n        animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    };\r\n    \r\n    return (\r\n        <div>\r\n            <div>\r\n                <button onClick={() => visualizeDijkstra(contextValue.startNode, contextValue.endNode)} className=\"visualizeBtn\">\r\n                    Visualize Dijkstra\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n",[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\DFS.js",["118","119"],[],"import { DFS, getNodesInShortestPath } from \"./algorithms/DFS\";\r\nimport { AlgorithmContext } from './GraphClass'\r\nimport { useContext } from \"react\";\r\n\r\n\r\nimport React from 'react';\r\n\r\nexport default function BFSVisualize() {\r\n    const contextValue = useContext(AlgorithmContext)\r\n\r\n    function visualizeBFS(grid,startNode, endNode){\r\n        contextValue.resetGrid();\r\n        const visitedNodes= DFS(grid,startNode, endNode) \r\n        let i=0\r\n        visitedNodes.map((item) => { \r\n            if(!grid[item.row][item.col].isWall) {\r\n                setTimeout(() => {\r\n                    document.getElementById(`node-${item.row}-${item.col}`).className = \"node node-visited\";\r\n                    \r\n                }, i*10);  \r\n            } \r\n            i++\r\n        })\r\n        const nodesInShortestpath = getNodesInShortestPath(grid[endNode.row][endNode.col], grid[startNode.row][startNode.col])\r\n        nodesInShortestpath.map((item) => { \r\n            setTimeout(() => {\r\n                document.getElementById(`node-${item.row}-${item.col}`).className = \"node node-shortest-path\";\r\n                \r\n            }, i*10);\r\n            i++\r\n        }); \r\n    }\r\n    return (\r\n        <div>\r\n            <button onClick={() => visualizeBFS(contextValue.grid, contextValue.startNode, contextValue.endNode)} className=\"visualizeBtn\">\r\n                Visualize DFS\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\algorithms\\DFS.js",[],[],"C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\SelectAlgorithm.js",["120"],[],"import React, { useState, useRef } from 'react';\r\nimport Dijsktra from \"./algorithms/Dijsktra\";\r\n// import { AlgorithmContext } from './GraphClass';\r\n// import { dijkstra } from './FindPath';\r\nimport BFSVisualize from './BFS';\r\nimport DFSVisualize from './DFS';\r\n\r\nexport const Algorithm = React.createContext()\r\n\r\nexport default function SelectAlgo() {\r\n    const [algorithm, setAlgorithm] = useState('notSelected')\r\n    const [buttonName, setButtonName] = useState('Visualize')\r\n    // const selectAlgorithm= useRef()\r\n    // const contextValues = useContext(AlgorithmContext)\r\n    // console.log(contextValues,'contextval')\r\n    return (\r\n        <Algorithm.Provider value={algorithm}>\r\n            <div className='btn visualize'>\r\n                <select id='algo' onChange={(e)=>handleOption(e)}>\r\n                    <option name='none' value='none'>\r\n                        Select An Algorithm\r\n                    </option>\r\n                    <option name='dijkstra' value='dijkstra'>\r\n                        Dijkstra\r\n                    </option>\r\n                    <option name='bfs' value='bfs'>\r\n                        BFS\r\n                    </option>\r\n                    <option name='dfs' value='dfs'>\r\n                        DFS\r\n                    </option>\r\n                </select> \r\n                <div className='algo-btn'>\r\n                    {\r\n                        algorithm === 'dijkstra' ?\r\n                            <Dijsktra ></Dijsktra>\r\n                        :\r\n                        algorithm === 'bfs' ?\r\n                            <BFSVisualize ></BFSVisualize> \r\n                        :\r\n                        algorithm === 'dfs' ?\r\n                            <DFSVisualize ></DFSVisualize> \r\n                        :\r\n                        <button className='visualizeBtn' onClick={handleButtonName}>{buttonName}</button>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </Algorithm.Provider>\r\n        // <Algorithm.Provider value={algorithm}>\r\n        //     <div className='btn visualize'>\r\n        //         <div onClick={handleOptions}>\r\n        //             <div name='none' value='none'>\r\n        //                 Select An Algorithm\r\n        //             </div>\r\n        //         </div>\r\n        //         <div id='algo' ref={selectAlgorithm} className='btn visualize' onChange={(e)=>handleOption(e)}>\r\n        //             <div name='dijkstra' value='dijkstra'>\r\n        //                 Dijkstra\r\n        //             </div>\r\n        //             <div name='bfs' value='bfs'>\r\n        //                 BFS\r\n        //             </div>\r\n        //             <div name='dfs' value='dfs'>\r\n        //                 DFS\r\n        //             </div>\r\n        //         </div> \r\n        //     </div>\r\n        //         <div className='algo-btn'>\r\n        //             {\r\n        //                 algorithm === 'dijkstra' ?\r\n        //                     <Dijsktra ></Dijsktra>\r\n        //                 :\r\n        //                 algorithm === 'bfs' ?\r\n        //                     <BFSVisualize ></BFSVisualize> \r\n        //                 :\r\n        //                 algorithm === 'dfs' ?\r\n        //                     <DFSVisualize ></DFSVisualize> \r\n        //                 :\r\n        //                 <button className='visualizeBtn' onClick={handleButtonName}>{buttonName}</button>\r\n        //             }\r\n        //         </div>\r\n        // </Algorithm.Provider>\r\n    )\r\n    function handleOption(e){\r\n        const value =e.target.value\r\n        setAlgorithm(value)  \r\n    }\r\n    // function handleOptions(){\r\n        \r\n    // }\r\n    function handleButtonName(){\r\n        if(algorithm === 'notSelected'){\r\n            setButtonName('Pick an Algorithm') \r\n        }\r\n    }\r\n}\r\n","C:\\Users\\asnas\\OneDrive\\Documents\\code\\React\\dream\\src\\components\\gridSize.js",[],[],{"ruleId":"121","severity":1,"message":"122","line":6,"column":8,"nodeType":"123","messageId":"124","endLine":6,"endColumn":12},{"ruleId":"125","severity":1,"message":"126","line":306,"column":33,"nodeType":"127","messageId":"128","endLine":306,"endColumn":35},{"ruleId":"125","severity":1,"message":"126","line":316,"column":40,"nodeType":"127","messageId":"128","endLine":316,"endColumn":42},{"ruleId":"121","severity":1,"message":"129","line":7,"column":11,"nodeType":"123","messageId":"124","endLine":7,"endColumn":18},{"ruleId":"125","severity":1,"message":"126","line":15,"column":33,"nodeType":"127","messageId":"128","endLine":15,"endColumn":35},{"ruleId":"125","severity":1,"message":"126","line":25,"column":40,"nodeType":"127","messageId":"128","endLine":25,"endColumn":42},{"ruleId":"121","severity":1,"message":"130","line":1,"column":16,"nodeType":"123","messageId":"124","endLine":1,"endColumn":26},{"ruleId":"121","severity":1,"message":"131","line":7,"column":20,"nodeType":"123","messageId":"124","endLine":7,"endColumn":29},{"ruleId":"121","severity":1,"message":"132","line":65,"column":11,"nodeType":"123","messageId":"124","endLine":65,"endColumn":34},{"ruleId":"125","severity":1,"message":"126","line":15,"column":33,"nodeType":"127","messageId":"128","endLine":15,"endColumn":35},{"ruleId":"125","severity":1,"message":"126","line":25,"column":40,"nodeType":"127","messageId":"128","endLine":25,"endColumn":42},{"ruleId":"121","severity":1,"message":"133","line":1,"column":27,"nodeType":"123","messageId":"124","endLine":1,"endColumn":33},"no-unused-vars","'Find' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'persons' is assigned a value but never used.","'useContext' is defined but never used.","'setRandom' is assigned a value but never used.","'changeVisualizeDijkstra' is assigned a value but never used.","'useRef' is defined but never used."]